#include <vector>
#include <algorithm>
#include <iostream>
#include <map>
#include <string>

using namespace std;

vector<vector<int>> get_data()
{
    int priests;
    cin >> priests;

    vector<vector<int>> data;
    for (int i{0}; i < priests; i++)
    {
	data.push_back({});
	for (int j{0}; j < 8; j++)
	{
	    int in_data;
	    cin >> in_data;
	    data.at(i).push_back(in_data - 1);
	}	    
    }
    reverse(data.begin(), data.end());
    return data;
}

vector<int> get_vote(vector<int>& priest_preference, vector<int>& vote_outcome, map<int, vector<int>> const& neighbours)
{
    vector<int> outcome{};
    for (int data_in{0}; data_in < 8; data_in++)
    {
	for (int pref : priest_preference)
	{
	    auto it = find(neighbours.at(data_in).begin(), neighbours.at(data_in).end(), pref);
	    if (it != neighbours.at(data_in).end())
		outcome.push_back(pref);
	}
    }
    return outcome;
}

void calc_outcome(vector<int>& priest_voting, vector<int>& priest_preference)
{
    // for (int i{0}; i < 8; i++)
    // {
    // 	data_outcome[i] = data_outcome[priest_voting[i]];
    // }
}

int main()
{    

    const map<int, vector<int>> neighbours{
	{0, {1,2,4}},
	{1, {0,3,6}},
	{2, {0,3,6}},
	{3, {1,2,7}},
	{4, {0,5,6}},
	{5, {1,4,7}},
	{6, {2,4,7}},
	{7, {3,5,6}}
    };

    const map<int, string> data_map{
	{1, "NNN"},
	{2, "NNY"},
	{3, "NYN"},
	{4, "NYY"},
	{5, "YNN"},
	{6, "YNY"},
	{7, "YYN"},
	{8, "YYY"}	
    };
    
    int rounds;
    cin >> rounds;

    for (int round{0}; round < rounds; rounds++)
    {
    	vector<vector<int>> priest_preference = get_data();
    	vector<vector<int>> priest_voting(priest_preference.size());
    	vector<int> vote_outcome{};
	
    	for (int priest{priest_preference.size() - 1}; priest >= 0; priest--)
    	{	   
	    priest_voting.push_back(get_vote(priest_preference[priest], vote_outcome, neighbours));

	    if (priest > 0)
		calc_outcome(priest_voting[priest], priest_preference.at(priest - 1));
    	}

    	int state{0};
    	for (vector<int> priest : priest_voting)
    	{
    	    state = priest[state]; 
    	}
    	cout << data_map.at(state) << endl;
    }


    return 0;
}
